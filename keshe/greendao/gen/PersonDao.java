package com.example.administrator.keshe.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.keshe.modle.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Void> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Oil = new Property(2, String.class, "oil", false, "OIL");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Vehclenumber1 = new Property(4, String.class, "vehclenumber1", false, "VEHCLENUMBER1");
        public final static Property Vehcleclass1 = new Property(5, String.class, "vehcleclass1", false, "VEHCLECLASS1");
        public final static Property Oilclass1 = new Property(6, String.class, "oilclass1", false, "OILCLASS1");
        public final static Property Vehclenumber2 = new Property(7, String.class, "vehclenumber2", false, "VEHCLENUMBER2");
        public final static Property Vehcleclass2 = new Property(8, String.class, "vehcleclass2", false, "VEHCLECLASS2");
        public final static Property Oilclass2 = new Property(9, String.class, "oilclass2", false, "OILCLASS2");
        public final static Property Vehclenumber3 = new Property(10, String.class, "vehclenumber3", false, "VEHCLENUMBER3");
        public final static Property Vehcleclass3 = new Property(11, String.class, "vehcleclass3", false, "VEHCLECLASS3");
        public final static Property Oilclass3 = new Property(12, String.class, "oilclass3", false, "OILCLASS3");
        public final static Property Vehcles2 = new Property(13, Integer.class, "vehcles2", false, "VEHCLES2");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"NUMBER\" TEXT," + // 1: number
                "\"OIL\" TEXT," + // 2: oil
                "\"SEX\" TEXT," + // 3: sex
                "\"VEHCLENUMBER1\" TEXT," + // 4: vehclenumber1
                "\"VEHCLECLASS1\" TEXT," + // 5: vehcleclass1
                "\"OILCLASS1\" TEXT," + // 6: oilclass1
                "\"VEHCLENUMBER2\" TEXT," + // 7: vehclenumber2
                "\"VEHCLECLASS2\" TEXT," + // 8: vehcleclass2
                "\"OILCLASS2\" TEXT," + // 9: oilclass2
                "\"VEHCLENUMBER3\" TEXT," + // 10: vehclenumber3
                "\"VEHCLECLASS3\" TEXT," + // 11: vehcleclass3
                "\"OILCLASS3\" TEXT," + // 12: oilclass3
                "\"VEHCLES2\" INTEGER);"); // 13: vehcles2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String oil = entity.getOil();
        if (oil != null) {
            stmt.bindString(3, oil);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String vehclenumber1 = entity.getVehclenumber1();
        if (vehclenumber1 != null) {
            stmt.bindString(5, vehclenumber1);
        }
 
        String vehcleclass1 = entity.getVehcleclass1();
        if (vehcleclass1 != null) {
            stmt.bindString(6, vehcleclass1);
        }
 
        String oilclass1 = entity.getOilclass1();
        if (oilclass1 != null) {
            stmt.bindString(7, oilclass1);
        }
 
        String vehclenumber2 = entity.getVehclenumber2();
        if (vehclenumber2 != null) {
            stmt.bindString(8, vehclenumber2);
        }
 
        String vehcleclass2 = entity.getVehcleclass2();
        if (vehcleclass2 != null) {
            stmt.bindString(9, vehcleclass2);
        }
 
        String oilclass2 = entity.getOilclass2();
        if (oilclass2 != null) {
            stmt.bindString(10, oilclass2);
        }
 
        String vehclenumber3 = entity.getVehclenumber3();
        if (vehclenumber3 != null) {
            stmt.bindString(11, vehclenumber3);
        }
 
        String vehcleclass3 = entity.getVehcleclass3();
        if (vehcleclass3 != null) {
            stmt.bindString(12, vehcleclass3);
        }
 
        String oilclass3 = entity.getOilclass3();
        if (oilclass3 != null) {
            stmt.bindString(13, oilclass3);
        }
 
        Integer vehcles2 = entity.getVehcles2();
        if (vehcles2 != null) {
            stmt.bindLong(14, vehcles2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String oil = entity.getOil();
        if (oil != null) {
            stmt.bindString(3, oil);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String vehclenumber1 = entity.getVehclenumber1();
        if (vehclenumber1 != null) {
            stmt.bindString(5, vehclenumber1);
        }
 
        String vehcleclass1 = entity.getVehcleclass1();
        if (vehcleclass1 != null) {
            stmt.bindString(6, vehcleclass1);
        }
 
        String oilclass1 = entity.getOilclass1();
        if (oilclass1 != null) {
            stmt.bindString(7, oilclass1);
        }
 
        String vehclenumber2 = entity.getVehclenumber2();
        if (vehclenumber2 != null) {
            stmt.bindString(8, vehclenumber2);
        }
 
        String vehcleclass2 = entity.getVehcleclass2();
        if (vehcleclass2 != null) {
            stmt.bindString(9, vehcleclass2);
        }
 
        String oilclass2 = entity.getOilclass2();
        if (oilclass2 != null) {
            stmt.bindString(10, oilclass2);
        }
 
        String vehclenumber3 = entity.getVehclenumber3();
        if (vehclenumber3 != null) {
            stmt.bindString(11, vehclenumber3);
        }
 
        String vehcleclass3 = entity.getVehcleclass3();
        if (vehcleclass3 != null) {
            stmt.bindString(12, vehcleclass3);
        }
 
        String oilclass3 = entity.getOilclass3();
        if (oilclass3 != null) {
            stmt.bindString(13, oilclass3);
        }
 
        Integer vehcles2 = entity.getVehcles2();
        if (vehcles2 != null) {
            stmt.bindLong(14, vehcles2);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // oil
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vehclenumber1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vehcleclass1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // oilclass1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vehclenumber2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vehcleclass2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // oilclass2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vehclenumber3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vehcleclass3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // oilclass3
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // vehcles2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOil(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVehclenumber1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVehcleclass1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOilclass1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVehclenumber2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVehcleclass2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOilclass2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVehclenumber3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVehcleclass3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOilclass3(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVehcles2(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Person entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Person entity) {
        return null;
    }

    @Override
    public boolean hasKey(Person entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
